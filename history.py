import os

import django
import openpyxl
from openpyxl.drawing.image import Image
from openpyxl.styles import Font, Alignment, PatternFill, Border, Side

import buttons

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'CryptoMysteryBot.settings')
django.setup()

from const import bot
from app.models import History, User

change_header = [['–î–∞—Ç–∞', 15], ['–í—ã –æ—Ç–¥–∞–ª–∏ (–≤–∞–ª—é—Ç–∞)', 20], ['–í—ã –æ—Ç–¥–∞–ª–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)', 25], ['–í—ã –ø–æ–ª—É—á–∏–ª–∏ (–≤–∞–ª—é—Ç–∞)', 25],
                 ['–í—ã –ø–æ–ª—É—á–∏–ª–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)', 30], ['–ü–∞—Ä–∞ –æ–±–º–µ–Ω–∞', 20], ['–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã, –∫–æ—Ç–æ—Ä—É—é –æ—Ç–¥–∞–µ—Ç–µ –∫ USDT', 40], ['–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—É—á–∞–µ—Ç–µ –∫ USDT', 41]]
buy_header = [['–î–∞—Ç–∞', 15], ['–í–∞–ª—é—Ç–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', 21], ['–°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', 25], ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 20], ['–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—É—á–∞–µ—Ç–µ –∫ USDT', 41]]
conclusion_header = [['–î–∞—Ç–∞', 15], ['–í–∞–ª—é—Ç–∞ –≤—ã–≤–æ–¥–∞', 20], ['–ê–¥—Ä–µ—Å –≤—ã–≤–æ–¥–∞', 25], ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 30]]
send_to_user_header = [['–î–∞—Ç–∞', 15], ['–í–∞–ª—é—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞', 20], ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 25],
                       ['–ö–æ—à–µ–ª–µ–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Å–æ–≤–µ—Ä—à–µ–Ω –ø–µ—Ä–µ–≤–æ–¥', 43]]


def headers(sheet, name):
    img = Image("CMB.jpg")
    img.height = 130
    img.width = 128
    sheet.add_image(img, "A1")
    font = Font(size='28', color='333399')
    sheet.cell(row=3, column=3, value=f'–ò—Å—Ç–æ—Ä–∏—è {name} –≤ üëë Crypto Mystery').font = font


def history(user):
    wb = openpyxl.Workbook()
    change_history = History.objects.filter(user=user, type='–û–±–º–µ–Ω')
    buy_history = History.objects.filter(user=user, type='–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è')
    conclusion_history = History.objects.filter(user=user, type='–í—ã–≤–æ–¥')
    send_to_user_history = History.objects.filter(user=user, type='–ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
    change = wb.create_sheet(title='–û–±–º–µ–Ω—ã')
    buy = wb.create_sheet(title='–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è')
    conclusion = wb.create_sheet(title='–í—ã–≤–æ–¥—ã')
    send_to_user = wb.create_sheet(title='–ü–µ—Ä–µ–≤–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
    del wb['Sheet']
    headers(change, '–æ–±–º–µ–Ω–æ–≤')
    headers(buy, '–ø–æ–∫—É–ø—É–ø–æ–∫')
    headers(conclusion, '–≤—ã–≤–æ–¥–æ–≤')
    headers(send_to_user, '–ø–µ—Ä–µ–≤–æ–¥–æ–≤')
    alf = 'ABCDEFGHI'
    font = Font(size='12', bold=True)
    fill = PatternFill(patternType='solid', fgColor='99ccff')
    bord = Border(left=Side(style='thin'),
                  right=Side(style='thin'),
                  top=Side(style='thin'),
                  bottom=Side(style='thin'))
    alignment = Alignment(horizontal='center')
    for col, header in enumerate(change_header, start=1):
        change.column_dimensions[alf[col - 1]].width = header[1]
        cell = change.cell(row=6, column=col, value=header[0])
        cell.font = font
        cell.alignment = alignment
        cell.fill = fill
        cell.border = bord

    for col, header in enumerate(buy_header, start=1):
        buy.column_dimensions[alf[col - 1]].width = header[1]
        cell = buy.cell(row=6, column=col, value=header[0])
        cell.font = font
        cell.alignment = alignment
        cell.fill = fill
        cell.border = bord

    for col, header in enumerate(conclusion_header, start=1):
        conclusion.column_dimensions[alf[col - 1]].width = header[1]
        cell = conclusion.cell(row=6, column=col, value=header[0])
        cell.font = font
        cell.alignment = alignment
        cell.fill = fill
        cell.border = bord

    for col, header in enumerate(send_to_user_header, start=1):
        send_to_user.column_dimensions[alf[col - 1]].width = header[1]
        cell = send_to_user.cell(row=6, column=col, value=header[0])
        cell.font = font
        cell.alignment = alignment
        cell.fill = fill
        cell.border = bord

    for row, data in enumerate(change_history, start=7):
        change.cell(row=row, column=1, value=data.date).alignment = alignment
        change.cell(row=row, column=2, value=data.send_cripto).alignment = alignment
        change.cell(row=row, column=3, value=str(data.send_value)).alignment = alignment
        change.cell(row=row, column=4, value=data.get_cripto).alignment = alignment
        change.cell(row=row, column=5, value=str(data.get_value)).alignment = alignment
        change.cell(row=row, column=6, value=f'{data.send_cripto} -> {data.get_cripto}').alignment = alignment
        change.cell(row=row, column=7, value=data.course_send).alignment = alignment
        change.cell(row=row, column=8, value=data.course_get).alignment = alignment

    for row, data in enumerate(buy_history, start=7):
        type = data.get_cripto
        if type == 'RUB':
            type = '–ö–∞—Ä—Ç–∞'
        buy.cell(row=row, column=1, value=data.date).alignment = alignment
        buy.cell(row=row, column=2, value=data.get_cripto).alignment = alignment
        buy.cell(row=row, column=3, value=type).alignment = alignment
        buy.cell(row=row, column=4, value=str(data.get_value)).alignment = alignment
        buy.cell(row=row, column=5, value=data.course_get).alignment = alignment

    for row, data in enumerate(conclusion_history, start=7):
        conclusion.cell(row=row, column=1, value=data.date).alignment = alignment
        conclusion.cell(row=row, column=2, value=data.send_cripto).alignment = alignment
        conclusion.cell(row=row, column=3, value=data.address).alignment = alignment
        conclusion.cell(row=row, column=4, value=str(data.send_value)).alignment = alignment

    for row, data in enumerate(send_to_user_history, start=7):
        send_to_user.cell(row=row, column=1, value=data.date).alignment = alignment
        send_to_user.cell(row=row, column=2, value=data.send_cripto).alignment = alignment
        send_to_user.cell(row=row, column=3, value=str(data.send_value)).alignment = alignment
        send_to_user.cell(row=row, column=4, value=data.address).alignment = alignment
    wb.save("–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π.xlsx")
    with open('–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π.xlsx', 'rb') as file:
        bot.send_document(chat_id=user.chat_id, document=file, caption='–§–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è',
                          reply_markup=buttons.go_to_menu())
