import datetime
import decimal
import os
import time

import django
import requests
from telebot import types

import analytics
import buttons
import conclusion
import const
import history
import review
import send_to_user
from const import bot
import change_and_buy
import replenishment

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'CryptoMysteryBot.settings')
django.setup()

from app.models import User, Wallet


def menu(chat_id):
    text = 'üëãüßø - –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –ß–µ–º —è –º–æ–≥—É –í–∞–º –ø–æ–º–æ—á—å?'
    bot.send_message(chat_id=chat_id, text=text, reply_markup=buttons.menu_buttons(chat_id))

@bot.message_handler(commands=['help'])
def help(message):
    chat_id = message.chat.id
    entities = []
    text = 'ü¶æ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ö—Ä–∏–ø—Ç–æ-–ë–æ—Ç–∞:\n\nüîÑ –ù–æ–≤—ã–π –æ–±–º–µ–Ω /create\n–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å:\n- –æ–±–º–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ —Ñ–∏–∞—Ç–∞;\n- –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ–±–º–µ–Ω —Å –≤—ã–≤–æ–¥–æ–º –Ω–∞ –í–∞—à —Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –∫–æ—à–µ–ª—ë–∫;\n- –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞.\n    \nüí≥ –µ-–ö–æ—à–µ–ª–µ–∫ /e_wallet\n–ü–æ–∫–∞–∂–µ—Ç –í–∞—à –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∫–æ—à–µ–ª—ë–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∏–ª–∏ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞. –ö–æ—à–µ–ª—ë–∫ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –≤–∏–¥—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ —Ñ–∏–∞—Ç–∞ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π –∏ –ø–ª–∞—Ç–µ–∂–µ–π.\n\n-–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞.\n*–ü—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏–ª–∏ —Ñ–∏–∞—Ç–∞ –Ω–∞ –∞–¥—Ä–µ—Å–∞ –∏–ª–∏ —Å—á–µ—Ç–∞ –±–æ—Ç–∞ –∫–æ–º–∏—Å—Å–∏—è 0%.\n-–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤.\n\nü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ /referal_url\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é  –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ö—Ä–∏–ø—Ç–æ-–ë–æ—Ç —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –∑–Ω–∞–∫–æ–º—ã–º–∏.\n–ü–æ–ª—É—á–∞–π—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≤–∏–¥–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç —Å–¥–µ–ª–∫–∏.\n    \nüìù –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ /history\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –í–∞—à—É —Å—É–º–º–∞—Ä–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç–µ –∏ –æ–±—â—É—é —Å—É–º–º—É –æ–±–º–µ–Ω–∞ –≤ usdt.\n    \n‚ùì –í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –ª—é–±—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –∏—Ö –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –¥–∞–Ω–Ω—ã–π —á–∞—Ç (@Crypto_Mystery_Operator).\n–ù–∞—à–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –ø–æ–º–æ–≥—É—Ç –í–∞–º. –ö—Ä–æ–º–µ —Ç–æ–≥–æ, –º—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç—ã –¥–ª—è –ø–æ–∂–µ–ª–∞–Ω–∏–π –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –ö—Ä–∏–ø—Ç–æ-–ë–æ—Ç–∞.',
    for n in const.entety:
        entities.append(
            types.MessageEntity(type=n['type'], offset=n['offset'], length=n['length'])
        )
    bot.send_message(chat_id, text, entities=entities)


@bot.message_handler(commands=['feedbacks'])
def feedbacks(message):
    chat_id = message.chat.id
    text = 'üßøüëá - –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å üí¨ –æ—Ç–∑—ã–≤–∞–º–∏ –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.'
    markup = types.InlineKeyboardMarkup()
    url = types.InlineKeyboardButton('üí¨–û—Ç–∑—ã–≤—ã', url='https://t.me/feedback_crypto_mystery')
    markup.add(url)
    bot.send_message(chat_id=chat_id, text=text, reply_markup=markup)

def send_start_message_to_admin(username, chat_id):
    admins = User.objects.filter(is_admin=True)
    markup = types.InlineKeyboardMarkup()
    if username:
        user = types.InlineKeyboardButton(text=username, url=f'tg://user?id={chat_id}')
    else:
        user = types.InlineKeyboardButton(text=chat_id, url=f'tg://user?id={chat_id}')
    markup.add(user)
    for admin in admins:
        if username:
            bot.send_message(chat_id=admin.chat_id, text=f'–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω —Å—Ç–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{username}',
                             reply_markup=markup)
        else:
            bot.send_message(chat_id=admin.chat_id, text=f'–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω —Å—Ç–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º id: {chat_id}',
                             reply_markup=markup)

def send_start_message(chat_id):
    text = 'üëãüßø- Hi!'
    bot.send_message(chat_id=chat_id, text=text)
    text = "üßø - –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –≥–∞–∑–µ—Ç—É Crypto Mysteryüì∞, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ–± –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –∏–∑ –º–∏—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–∞—Ö –∏ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞."
    markup = types.InlineKeyboardMarkup()
    url = types.InlineKeyboardButton(text='üá∑üá∫üì∞–ì–∞–∑–µ—Ç–∞ Crypto Mystery', url='https://t.me/+ukhGLz-132JmYWM6')
    markup.add(url)
    bot.send_message(chat_id=chat_id, text=text, reply_markup=markup)
@bot.message_handler(commands=['start'])
def start(message):
    username = message.from_user.first_name
    chat_id = message.chat.id
    if not User.objects.filter(chat_id=chat_id):
        send_start_message_to_admin(username, chat_id)
        send_start_message(chat_id=chat_id)
        wallte = Wallet.objects.create()
        user, _ = User.objects.create(chat_id=chat_id, wallet=wallte, username=username), True
        time.sleep(2)
    else:
        user, _ = User.objects.get(chat_id=chat_id), False
    if _ or not user.referal_id:
        ref_id = message.text.split()
        if len(ref_id) > 1 and User.objects.filter(chat_id=ref_id[1]) and ref_id[1] != str(chat_id):
            user.referal_id = ref_id[1]
            text = '–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª'
            if username:
                text += f': @{username}'
            bot.send_message(chat_id=chat_id)
            user.save()
    menu(chat_id=chat_id)


def wallet(chat_id, user):
    text = f'Crypto M wallet\n' \
           f'ID: `{chat_id}`\n' \
           f'–ë–∞–ª–∞–Ω—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:\n\n' + user.wallet.wallet_balance()
    bot.send_message(chat_id=chat_id, text=text, reply_markup=buttons.wallet_buttons(), parse_mode='MarkdownV2')


def get_course(cripto, value='RUB'):
    url = f'https://min-api.cryptocompare.com/data/price?fsym={cripto}&tsyms={value}'
    response = requests.get(url).json()
    return response[value]

def get_sell_course(value):
    n = ''
    url = f'https://min-api.cryptocompare.com/data/price?fsym={value}&tsyms=RUB,BTC,ETH,USDT,TRX,TON,XMR'
    response = requests.get(url).json()
    for i in response:
        cost = format(decimal.Decimal(response[i]).quantize(decimal.Decimal("1.00000000")).normalize(), 'f')
        n += f'{i} -> {value}: {cost}\n'
    return n

def course(chat_id, type, value='RUB'):
    date = datetime.datetime.now()
    msg = bot.send_message(chat_id=chat_id, text='–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –ú—ã –∏—â–µ–º —Å–∞–º—ã–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å')
    text = f'–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {date.hour}:{date.minute}:{date.second}\n\n'
    if type == 'buy':
        ciptos = ['BTC', 'ETH', 'USDT', 'TRX', 'TON', 'XMR']
        for cripto in ciptos:
            course = get_course(cripto=cripto, value=value)
            text += f'{value} -> {cripto}: {course}\n'
    else:
        text += get_sell_course(value=value)
    bot.edit_message_text(chat_id=chat_id, text=text, message_id=msg.id, reply_markup=buttons.cource(value=value, type=type))


@bot.message_handler(commands=['e_wallet'])
def e_wallet(message):
    chat_id = message.chat.id
    user = User.objects.get(chat_id=chat_id)
    wallet(chat_id=chat_id, user=user)


@bot.message_handler(commands=['create'])
def create(message):
    chat_id = message.chat.id
    change_and_buy.menu(chat_id=chat_id)

@bot.message_handler(commands=['history'])
def histor(message):
    chat_id = message.chat.id
    user = User.objects.get(chat_id=chat_id)
    history.history(user)


@bot.message_handler(commands=['rate'])
def rate(message):
    chat_id = message.chat.id
    course(chat_id=chat_id, type='buy')

@bot.message_handler(commands=['referal_url'])
def referal_url(message):
    chat_id = message.chat.id
    text = 'ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:\n\n' \
           '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ üßø Crypto Mystery –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –æ—Ç 10% —Å –Ω–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞ –æ—Ç –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª–∞!'
    bot.send_message(chat_id=chat_id, text=text, reply_markup=buttons.ref(chat_id=chat_id))


@bot.message_handler(content_types='text')
def clear_keyboard(message):
    if message.text in ["üîÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –æ–±–º–µ–Ω", "üí≥ –í–∞—à Crypto M –∫–æ—à–µ–ª—ë–∫", "ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", "üì∞ –ì–∞–∑–µ—Ç–∞ Crypto Mystery", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üí¨ –û—Ç–∑—ã–≤—ã",  "‚ùì–°–ø—Ä–∞–≤–∫–∞", "üìà –¢–∞–±–ª–æ –∫—É—Ä—Å–æ–≤"]:
        chat_id = message.chat.id
        markup = types.ReplyKeyboardRemove()
        bot.send_message(chat_id=chat_id, text='–ù–∞—à –±–æ—Ç –æ–±–Ω–æ–≤–∏–ª—Å—è, –ø–æ—ç—Ç–æ–º—É —Å—Ç–∞—Ä–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É –≤–∞—Å —É–¥–∞–ª–µ–Ω–∞. –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∂–µ –∫–æ–º–∞–Ω–¥—ã.', reply_markup=markup)
        time.sleep(2)
        menu(chat_id=chat_id)


def commissions(chat_id):
    text = '–ö–æ–º–∏—Å—Å–∏–∏ –Ω–∞ –≤—ã–≤–æ–¥:\n\n' \
           f'RUB: 5%\n' \
           f'USDT: 5%\n' \
           f'BTC: 5%\n' \
           f'ETH: 5%\n' \
           f'TRX: 5%\n' \
           f'TON: 5%\n' \
           f'XMR: 5%'
    bot.send_message(chat_id=chat_id, text=text, reply_markup=buttons.commissions())


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    message_id = call.message.id
    chat_id = call.message.chat.id
    first_name = call.message.chat.first_name
    msg_text = call.message.text
    user, _ = User.objects.get_or_create(chat_id=call.from_user.id)
    if first_name and first_name != user.username:
        user.username = first_name
        user.save()
    if call.message:
        data = call.data.split('|')
        bot.clear_step_handler_by_chat_id(chat_id=chat_id)
        if data[0] in ['change', 'conclusion', 'replenishment'] and len(data)>=2 and data[1] in ['approve', 'cansel', 'adm_approve', 'adm_cansel']:
            if data[1] in ['approve', 'adm_approve']:
                text = '‚úÖ\n' + call.message.text
            else:
                text = '‚ùå\n' + call.message.text
            bot.edit_message_text(chat_id=chat_id, text=text, message_id=message_id)
        else:
            try:
                bot.delete_message(chat_id=chat_id, message_id=message_id)
            except Exception:
                pass
        if data[0] == 'menu':
            user.last_value = ''
            user.text = ''
            user.rate = 1
            user.save()
            menu(chat_id=chat_id)

        elif data[0] == 'change':
            change_and_buy.new_callback(data=data[1:], chat_id=chat_id, user=user, msg_text=msg_text)
        elif data[0] == 'my_wallet':
            wallet(chat_id=chat_id, user=user)
        elif data[0] == 'send_to_user':
            send_to_user.callback(data=data[1:], chat_id=chat_id, user=user)
        elif data[0] == 'conclusion':
            conclusion.callback(data=data[1:], chat_id=chat_id, user=user, msg_text=msg_text)
        elif data[0] == 'course':
            if len(data) == 3:
                course(chat_id=chat_id, value=data[2], type=data[1])
            else:
                course(chat_id=chat_id, type=data[1])
        elif data[0] == 'review':
            review.callback(data=data[1:], chat_id=chat_id, user=user)
        elif data[0] == 'history':
            history.history(user)
        elif data[0] == 'analytics':
            analytics.analytics(chat_id, user)
        elif data[0] == 'replenishment':
            replenishment.callback(data=data[1:], user=user, chat_id=chat_id, msg_text=msg_text)
        elif data[0] == 'commissions':
            commissions(chat_id)
        else:
            menu(chat_id=chat_id)


bot.infinity_polling(timeout=50, long_polling_timeout=25)
